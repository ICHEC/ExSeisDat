/*******************************************************************************************//*!
 *   \file
 *   \author Cathal O Broin - cathal@ichec.ie - first commit
 *   \copyright TBD. Do not distribute
 *   \date July 2016
 *   \brief The logging layer
 *   \details The logging layer provides a standard approach to logging and error handling throughout
 *   the PIOL while respecting the boundary between layers.
 *//*******************************************************************************************/
#ifndef PIOLANCLOG_INCLUDE_GUARD
#define PIOLANCLOG_INCLUDE_GUARD
#include <string>
#include <forward_list>
namespace PIOL { namespace Log {

/*! \brief The enumeration for the different layers of the PIOL.
 */
enum class Layer : size_t
{
    Data,
    Object,
    File,
    Set,
    Operations,
    Comm,
    Log,        //!< The Log layer itself.
    MPI,        //!< Misc MPI.
    PIOL
};

/*! \brief The enumeration for the different status messages.
 */
enum class Status : size_t
{
    Note,       //!< A general note item.
    Debug,      //!< A debug item
    Warning,    //!< A PIOL warning item
    Error       //!< A serious error which should lead to program termination
};

/*! \brief The enumeration for the verbosity level of records
 */
enum class Verb : size_t
{
    None,       //!< Record no information beyond fatal errors
    Minimal,    //!< Record essential information including other errors and warnings
    Extended,   //!< Record some non-warnings
    Verbose,    //!< Record a high level of information
    Max         //!< Maximum Verbosity level. (for debugging)
};

/*! \brief An Item instance is a discrete object generated by a recording event and added
 *  to the logging list.
 */
struct Item
{
    std::string file;   //!< The file associated with the item
    Layer layer;        //!< The layer the item was recorded in
    Status stat;        //!< The item status
    std::string msg;    //!< The message for the end-user which is associated with the item.
    Verb vrbsy;         //!< The item verbosity.
};

/*! \brief The class for managing all logging activities.
 */
class Logger
{
    private :
    Verb maxLevel;                      //!< The maximum verbosity level
    std::forward_list<Item> loglist;    //!< The linked-list container which holds the log items
    bool error;                         //!< The error status.

    public :

    /*! \brief The constructor with the most options
     *  \param[in] maxLevel_ The maximum verbosity level of stored logs.
     */
    Logger(const Verb maxLevel_) : maxLevel(maxLevel_), error(false)
    {
    }
    Logger(void) : Logger(Verb::None)  //!< \overload
    {
    }

    /*! \brief The default destructor. It processes all of the logs
     */
    ~Logger(void)
    {
        procLog();
    }

    /*! \brief Records a message to the log layer.
     *  \param[in] file The associated filename. An empty string should be passed if there is no associated file.
     *  \param[in] layer The associated layer of the PIOL.
     *  \param[in] stat The associated status.
     *  \param[in] msg The message for the end-user.
     *  \param[in] verbosity The verbosity level of the message.
     */
    void record(const std::string file, const Layer layer, const Status stat, const std::string msg,
                const Verb verbosity);

    /*! \overload
     * \brief Records a message to the log layer if the condition holds.
     *  \param[in] file The associated filename. An empty string should be passed if there is no associated file.
     *  \param[in] layer The associated layer of the PIOL.
     *  \param[in] stat The associated status.
     *  \param[in] msg The message for the end-user.
     *  \param[in] verbosity The verbosity level of the message.
     *  \param[in] condition If the condition is true log a message
     */
    void record(const std::string file, const Layer layer, const Status stat, const std::string msg,
                const Verb verbosity, const bool condition);

    /*! \brief Process the list of log items.
     */
    void procLog(void);

    /*! \brief Find out the number of items in the log list with a given status.
     *  \param[in] stat The status to be queried
     *  \return The number of items with a status of \c stat
     */
    size_t numStat(const Status stat);

    /*! \brief Check if the Log object has recorded an error.
     *  \retval true An error has been encountered.
     *  \retval false An error has not been encountered.
     */
    bool isErr(void)
    {
        return error;
    }
};
}}
#endif
